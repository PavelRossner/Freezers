// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mrazaky.Data;

#nullable disable

namespace Mrazaky.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Mrazaky.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("User's first name");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("User's last name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Mrazaky.Models.ApplicationUserFreezer", b =>
                {
                    b.Property<int>("ApplicationUserFreezerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Gets or sets the user freezer identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationUserFreezerID"), 1L, 1);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Gets or sets the user identifier.");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasComment("Gets or sets the create at.");

                    b.Property<int>("FreezerID")
                        .HasColumnType("int")
                        .HasComment("Gets or sets the freezed identifier.");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment(" Gets or sets a value indicating whether this instance is active.");

                    b.HasKey("ApplicationUserFreezerID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("FreezerID");

                    b.ToTable("ApplicationUserFreezer");

                    b.HasComment("Holds information about user's freezers");
                });

            modelBuilder.Entity("Mrazaky.Models.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("FoodId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodId"), 1L, 1);

                    b.Property<DateTime>("BestBefore")
                        .HasColumnType("date")
                        .HasComment("BestBefore");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Category");

                    b.Property<DateTime>("DatePurchase")
                        .HasColumnType("date")
                        .HasComment("DatePurchase");

                    b.Property<string>("FoodName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("FoodName");

                    b.Property<int?>("FreezerId")
                        .HasColumnType("int");

                    b.Property<string>("FreezerName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("FreezerName");

                    b.Property<string>("FreezerPosition")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("FreezerPosition");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Note");

                    b.Property<string>("NumberOfPackages")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("NumberOfPackages");

                    b.Property<string>("PackageLabel")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("PackageLabel");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Weight");

                    b.HasKey("FoodId");

                    b.HasIndex("FreezerId");

                    b.HasIndex("UserId");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("Mrazaky.Models.FoodCategory", b =>
                {
                    b.Property<int>("FoodCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("FoodCategoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodCategoryId"), 1L, 1);

                    b.Property<string>("FoodCategoryName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Category");

                    b.HasKey("FoodCategoryId");

                    b.ToTable("FoodCategory");
                });

            modelBuilder.Entity("Mrazaky.Models.Freezer", b =>
                {
                    b.Property<int>("FreezerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("FreezerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FreezerId"), 1L, 1);

                    b.Property<int>("DefrostInterval")
                        .HasColumnType("int")
                        .HasComment("DefrostInterval");

                    b.Property<string>("FreezerName")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("FreezerName");

                    b.Property<DateTime>("LastDefrosted")
                        .HasColumnType("date")
                        .HasComment("LastDefrosted");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Note");

                    b.Property<int>("NumberOfShelves")
                        .HasColumnType("int")
                        .HasComment("NumberOfShelves");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FreezerId");

                    b.HasIndex("FreezerName")
                        .IsUnique()
                        .HasFilter("[FreezerName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Freezer");
                });

            modelBuilder.Entity("Mrazaky.Models.FreezerFood", b =>
                {
                    b.Property<int>("FreezerFoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("FreezerFoodID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FreezerFoodID"), 1L, 1);

                    b.Property<int>("FoodID")
                        .HasColumnType("int")
                        .HasComment("FoodID");

                    b.Property<int>("FreezerID")
                        .HasColumnType("int")
                        .HasComment("FreezerID");

                    b.Property<string>("FreezerName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("FreezerLocation");

                    b.HasKey("FreezerFoodID");

                    b.HasIndex("FoodID");

                    b.HasIndex("FreezerID");

                    b.ToTable("FreezerFood");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Mrazaky.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Mrazaky.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mrazaky.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Mrazaky.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mrazaky.Models.ApplicationUserFreezer", b =>
                {
                    b.HasOne("Mrazaky.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserFreezer")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_UserFreezer_ApplicationUser");

                    b.HasOne("Mrazaky.Models.Freezer", "Freezer")
                        .WithMany("UserFreezer")
                        .HasForeignKey("FreezerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserFreezer_Freezer");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Freezer");
                });

            modelBuilder.Entity("Mrazaky.Models.Food", b =>
                {
                    b.HasOne("Mrazaky.Models.Freezer", null)
                        .WithMany("Foods")
                        .HasForeignKey("FreezerId");

                    b.HasOne("Mrazaky.Models.ApplicationUser", "User")
                        .WithMany("Foods")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mrazaky.Models.Freezer", b =>
                {
                    b.HasOne("Mrazaky.Models.ApplicationUser", "User")
                        .WithMany("Freezers")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mrazaky.Models.FreezerFood", b =>
                {
                    b.HasOne("Mrazaky.Models.Food", "Food")
                        .WithMany("FreezerFood")
                        .HasForeignKey("FoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FreezerFood_Food");

                    b.HasOne("Mrazaky.Models.Freezer", "Freezer")
                        .WithMany("FreezerFood")
                        .HasForeignKey("FreezerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FreezerFood_Freezer");

                    b.Navigation("Food");

                    b.Navigation("Freezer");
                });

            modelBuilder.Entity("Mrazaky.Models.ApplicationUser", b =>
                {
                    b.Navigation("Foods");

                    b.Navigation("Freezers");

                    b.Navigation("UserFreezer");
                });

            modelBuilder.Entity("Mrazaky.Models.Food", b =>
                {
                    b.Navigation("FreezerFood");
                });

            modelBuilder.Entity("Mrazaky.Models.Freezer", b =>
                {
                    b.Navigation("Foods");

                    b.Navigation("FreezerFood");

                    b.Navigation("UserFreezer");
                });
#pragma warning restore 612, 618
        }
    }
}
